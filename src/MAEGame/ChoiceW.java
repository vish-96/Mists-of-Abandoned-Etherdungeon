// --------------------------------------------------------
// Code generated by Papyrus Java
// --------------------------------------------------------

package MAEGame;

import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

// TODO: Auto-generated Javadoc
/**
 * *********************************************************.
 */
/**
 * Stores the current list of warriors in an Encounter
 */
public class ChoiceW {

	/** The elementw. */
	private Element[] elementw = new Element[10];

	// private Element[] elementw2= new Element[7];
	/** The l warrior is an array list of alive warriors */
	// public Element[] l_warrior=new Element[3];
	private ArrayList<Element> l_warrior = new ArrayList<Element>();

	/**
	 * The l warrior history faint is an array list that stores the history of
	 * fainted warriors
	 */
	private ArrayList<Element> l_warrior_history_faint = new ArrayList<Element>();

	/**
	 * Gets the l warrior history faint.
	 *
	 * @return the l warrior history faint
	 */
	public ArrayList<Element> getL_warrior_history_faint() {
		return l_warrior_history_faint;
	}

	/**
	 * Gets the l warrior.
	 *
	 * @return the l warrior
	 */
	public ArrayList<Element> getL_warrior() {
		return l_warrior;
	}

	/**
	 * Gets the element.
	 *
	 * @return the element
	 */
	public Element[] getElement() {
		return elementw;
	}

	/**
	 * Instantiates a new choice W. Instantiates exhaustive list of warriors and
	 * allows user to pick 3 warriors of it's choice
	 */
	public ChoiceW() {
		elementw[0] = new Element("warrior", 50, 60,"N.A");
		elementw[1] = new Element("paladin", 10, 100,"N.A");
		elementw[2] = new Element("cleric", 40, 20,"N.A");
		elementw[3] = new Element("assassin", 80, 40,"N.A");
		elementw[4] = new Element("vishal", 50, 100,"N.A");
		elementw[5] = new Element("rogue", 30, 20,"Possion the target for it's next three turns taking 3HP everytime ");
		elementw[6] = new Element("berserker", 50, 40,"He revives the demon if it died with his attack!!");
		elementw[7] = new Element("monk", 80, 20,"Dodges the 1st attack");
		elementw[8] = new Element("duelist", 60, 50,"You get to attack twice !!! ");
		elementw[9] = new Element("defender", 40, 60,"Retaliates !!! ");
		/*
		 * for (int i=0;i<l_warrior.length;i++) { l_warrior[i]=elementw[i]; }
		 */
		System.out.println("------------------------------------------------------");
		System.out.println("\t Warriors");
		for (int i = 0; i < elementw.length; i++) {
			System.out.println("W " + (i + 1) + ":" + elementw[i].getName() + "\tStrength=" + elementw[i].getAttack()
					+ " HP=" + elementw[i].getHp() + "/" + elementw[i].getMaxhp()+"\t-"+elementw[i].getDesciption());

		}
		System.out.println("------------------------------------------------------");
		
		boolean exception_occured = true;
		while (exception_occured==true) {
			try {
				Scanner ch = new Scanner(System.in);
				System.out.println("Choose your warriors (4):");
				int[] mat = new int[4];

				while (true) {
					for (int i = 0; i < 4; i++) {
						mat[i] = ch.nextInt();
					}
					bubbleSort(mat);
					if (check_duplicate(mat) == true)
						System.out.println("Duplicate elements found...\nEnter again: \n");
					else
						break;
				}
				for (int i = 0; i < 4; i++) {
					l_warrior.add(elementw[mat[i] - 1]);
				}
				exception_occured = false;
				break;
			} catch (InputMismatchException e) {
				System.out.println(
						"Exception caught by this program: Enter numeric value " + "and choose your wariors again.");

			}
		}

	}

	/**
	 * Bubble sort. Sorts the mat array which stores the indexes of user's choice of
	 * warriors Sorting is required to avoid duplicate elements entered by the user
	 * 
	 * @param array the array
	 */
	public void bubbleSort(int array[]) {
		// your code
		int temp = 0;
		for (int j = 0; j < array.length; j++) {
			for (int i = 0; i < array.length - 1; i++) {
				if (array[i + 1] < array[i]) {
					temp = array[i + 1];
					array[i + 1] = array[i];
					array[i] = temp;
				}
			}
		}
	}

	/**
	 * Check duplicate elements in mat array If true, the users is asked to enter
	 * indexes of warrior until they have entered all the choices unique
	 * 
	 * @param array the array
	 * @return true, if successful
	 */
	public boolean check_duplicate(int array[]) {
		int f = 0;
		for (int i = 1; i < array.length; i++) {
			if (array[i - 1] == array[i])
				f = 1;
		}
		if (f == 1)
			return true;
		else
			return false;
	}
};
